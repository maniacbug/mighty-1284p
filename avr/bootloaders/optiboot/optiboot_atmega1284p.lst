
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  0001fc00  0001fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000aec  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000091a  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .version      00000002  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0001fc00 <main>:
   1fc00:	0f 92       	push	r0
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
   1fc06:	11 24       	eor	r1, r1
   1fc08:	84 b7       	in	r24, 0x34	; 52
   1fc0a:	14 be       	out	0x34, r1	; 52
   1fc0c:	81 ff       	sbrs	r24, 1
   1fc0e:	f1 d0       	rcall	.+482    	; 0x1fdf2 <appStart>
   1fc10:	85 e0       	ldi	r24, 0x05	; 5
   1fc12:	80 93 81 00 	sts	0x0081, r24
   1fc16:	82 e0       	ldi	r24, 0x02	; 2
   1fc18:	80 93 c0 00 	sts	0x00C0, r24
   1fc1c:	88 e1       	ldi	r24, 0x18	; 24
   1fc1e:	80 93 c1 00 	sts	0x00C1, r24
   1fc22:	86 e0       	ldi	r24, 0x06	; 6
   1fc24:	80 93 c2 00 	sts	0x00C2, r24
   1fc28:	80 e1       	ldi	r24, 0x10	; 16
   1fc2a:	80 93 c4 00 	sts	0x00C4, r24
   1fc2e:	8e e0       	ldi	r24, 0x0E	; 14
   1fc30:	ca d0       	rcall	.+404    	; 0x1fdc6 <watchdogConfig>
   1fc32:	20 9a       	sbi	0x04, 0	; 4
   1fc34:	26 e0       	ldi	r18, 0x06	; 6
   1fc36:	80 e3       	ldi	r24, 0x30	; 48
   1fc38:	9c ef       	ldi	r25, 0xFC	; 252
   1fc3a:	31 e0       	ldi	r19, 0x01	; 1
   1fc3c:	90 93 85 00 	sts	0x0085, r25
   1fc40:	80 93 84 00 	sts	0x0084, r24
   1fc44:	36 bb       	out	0x16, r19	; 22
   1fc46:	b0 9b       	sbis	0x16, 0	; 22
   1fc48:	fe cf       	rjmp	.-4      	; 0x1fc46 <main+0x46>
   1fc4a:	18 9a       	sbi	0x03, 0	; 3
   1fc4c:	a8 95       	wdr
   1fc4e:	21 50       	subi	r18, 0x01	; 1
   1fc50:	a9 f7       	brne	.-22     	; 0x1fc3c <main+0x3c>
   1fc52:	00 e0       	ldi	r16, 0x00	; 0
   1fc54:	10 e0       	ldi	r17, 0x00	; 0
   1fc56:	ee 24       	eor	r14, r14
   1fc58:	e3 94       	inc	r14
   1fc5a:	e1 e1       	ldi	r30, 0x11	; 17
   1fc5c:	de 2e       	mov	r13, r30
   1fc5e:	f3 e0       	ldi	r31, 0x03	; 3
   1fc60:	ff 2e       	mov	r15, r31
   1fc62:	a5 d0       	rcall	.+330    	; 0x1fdae <getch>
   1fc64:	81 34       	cpi	r24, 0x41	; 65
   1fc66:	71 f4       	brne	.+28     	; 0x1fc84 <main+0x84>
   1fc68:	a2 d0       	rcall	.+324    	; 0x1fdae <getch>
   1fc6a:	89 83       	std	Y+1, r24	; 0x01
   1fc6c:	b2 d0       	rcall	.+356    	; 0x1fdd2 <verifySpace>
   1fc6e:	89 81       	ldd	r24, Y+1	; 0x01
   1fc70:	82 38       	cpi	r24, 0x82	; 130
   1fc72:	09 f4       	brne	.+2      	; 0x1fc76 <main+0x76>
   1fc74:	8b c0       	rjmp	.+278    	; 0x1fd8c <main+0x18c>
   1fc76:	81 38       	cpi	r24, 0x81	; 129
   1fc78:	11 f4       	brne	.+4      	; 0x1fc7e <main+0x7e>
   1fc7a:	84 e0       	ldi	r24, 0x04	; 4
   1fc7c:	01 c0       	rjmp	.+2      	; 0x1fc80 <main+0x80>
   1fc7e:	83 e0       	ldi	r24, 0x03	; 3
   1fc80:	8f d0       	rcall	.+286    	; 0x1fda0 <putch>
   1fc82:	8b c0       	rjmp	.+278    	; 0x1fd9a <main+0x19a>
   1fc84:	82 34       	cpi	r24, 0x42	; 66
   1fc86:	11 f4       	brne	.+4      	; 0x1fc8c <main+0x8c>
   1fc88:	84 e1       	ldi	r24, 0x14	; 20
   1fc8a:	03 c0       	rjmp	.+6      	; 0x1fc92 <main+0x92>
   1fc8c:	85 34       	cpi	r24, 0x45	; 69
   1fc8e:	19 f4       	brne	.+6      	; 0x1fc96 <main+0x96>
   1fc90:	85 e0       	ldi	r24, 0x05	; 5
   1fc92:	a7 d0       	rcall	.+334    	; 0x1fde2 <getNch>
   1fc94:	82 c0       	rjmp	.+260    	; 0x1fd9a <main+0x19a>
   1fc96:	85 35       	cpi	r24, 0x55	; 85
   1fc98:	91 f4       	brne	.+36     	; 0x1fcbe <main+0xbe>
   1fc9a:	89 d0       	rcall	.+274    	; 0x1fdae <getch>
   1fc9c:	a8 2e       	mov	r10, r24
   1fc9e:	bb 24       	eor	r11, r11
   1fca0:	86 d0       	rcall	.+268    	; 0x1fdae <getch>
   1fca2:	08 2f       	mov	r16, r24
   1fca4:	10 e0       	ldi	r17, 0x00	; 0
   1fca6:	10 2f       	mov	r17, r16
   1fca8:	00 27       	eor	r16, r16
   1fcaa:	0a 29       	or	r16, r10
   1fcac:	1b 29       	or	r17, r11
   1fcae:	81 2f       	mov	r24, r17
   1fcb0:	88 1f       	adc	r24, r24
   1fcb2:	88 27       	eor	r24, r24
   1fcb4:	88 1f       	adc	r24, r24
   1fcb6:	8b bf       	out	0x3b, r24	; 59
   1fcb8:	00 0f       	add	r16, r16
   1fcba:	11 1f       	adc	r17, r17
   1fcbc:	6d c0       	rjmp	.+218    	; 0x1fd98 <main+0x198>
   1fcbe:	86 35       	cpi	r24, 0x56	; 86
   1fcc0:	21 f4       	brne	.+8      	; 0x1fcca <main+0xca>
   1fcc2:	84 e0       	ldi	r24, 0x04	; 4
   1fcc4:	8e d0       	rcall	.+284    	; 0x1fde2 <getNch>
   1fcc6:	80 e0       	ldi	r24, 0x00	; 0
   1fcc8:	db cf       	rjmp	.-74     	; 0x1fc80 <main+0x80>
   1fcca:	84 36       	cpi	r24, 0x64	; 100
   1fccc:	09 f0       	breq	.+2      	; 0x1fcd0 <main+0xd0>
   1fcce:	40 c0       	rjmp	.+128    	; 0x1fd50 <main+0x150>
   1fcd0:	6e d0       	rcall	.+220    	; 0x1fdae <getch>
   1fcd2:	6d d0       	rcall	.+218    	; 0x1fdae <getch>
   1fcd4:	c8 2e       	mov	r12, r24
   1fcd6:	6b d0       	rcall	.+214    	; 0x1fdae <getch>
   1fcd8:	80 ee       	ldi	r24, 0xE0	; 224
   1fcda:	00 30       	cpi	r16, 0x00	; 0
   1fcdc:	18 07       	cpc	r17, r24
   1fcde:	18 f4       	brcc	.+6      	; 0x1fce6 <main+0xe6>
   1fce0:	f8 01       	movw	r30, r16
   1fce2:	f7 be       	out	0x37, r15	; 55
   1fce4:	e8 95       	spm
   1fce6:	a1 2c       	mov	r10, r1
   1fce8:	51 e0       	ldi	r21, 0x01	; 1
   1fcea:	b5 2e       	mov	r11, r21
   1fcec:	60 d0       	rcall	.+192    	; 0x1fdae <getch>
   1fcee:	f5 01       	movw	r30, r10
   1fcf0:	81 93       	st	Z+, r24
   1fcf2:	5f 01       	movw	r10, r30
   1fcf4:	ce 16       	cp	r12, r30
   1fcf6:	d1 f7       	brne	.-12     	; 0x1fcec <main+0xec>
   1fcf8:	f0 ee       	ldi	r31, 0xE0	; 224
   1fcfa:	00 30       	cpi	r16, 0x00	; 0
   1fcfc:	1f 07       	cpc	r17, r31
   1fcfe:	18 f0       	brcs	.+6      	; 0x1fd06 <main+0x106>
   1fd00:	f8 01       	movw	r30, r16
   1fd02:	f7 be       	out	0x37, r15	; 55
   1fd04:	e8 95       	spm
   1fd06:	65 d0       	rcall	.+202    	; 0x1fdd2 <verifySpace>
   1fd08:	07 b6       	in	r0, 0x37	; 55
   1fd0a:	00 fc       	sbrc	r0, 0
   1fd0c:	fd cf       	rjmp	.-6      	; 0x1fd08 <main+0x108>
   1fd0e:	f8 01       	movw	r30, r16
   1fd10:	a0 e0       	ldi	r26, 0x00	; 0
   1fd12:	b1 e0       	ldi	r27, 0x01	; 1
   1fd14:	2c 91       	ld	r18, X
   1fd16:	30 e0       	ldi	r19, 0x00	; 0
   1fd18:	11 96       	adiw	r26, 0x01	; 1
   1fd1a:	8c 91       	ld	r24, X
   1fd1c:	11 97       	sbiw	r26, 0x01	; 1
   1fd1e:	90 e0       	ldi	r25, 0x00	; 0
   1fd20:	98 2f       	mov	r25, r24
   1fd22:	88 27       	eor	r24, r24
   1fd24:	82 2b       	or	r24, r18
   1fd26:	93 2b       	or	r25, r19
   1fd28:	12 96       	adiw	r26, 0x02	; 2
   1fd2a:	0c 01       	movw	r0, r24
   1fd2c:	e7 be       	out	0x37, r14	; 55
   1fd2e:	e8 95       	spm
   1fd30:	11 24       	eor	r1, r1
   1fd32:	32 96       	adiw	r30, 0x02	; 2
   1fd34:	82 e0       	ldi	r24, 0x02	; 2
   1fd36:	a0 30       	cpi	r26, 0x00	; 0
   1fd38:	b8 07       	cpc	r27, r24
   1fd3a:	61 f7       	brne	.-40     	; 0x1fd14 <main+0x114>
   1fd3c:	85 e0       	ldi	r24, 0x05	; 5
   1fd3e:	f8 01       	movw	r30, r16
   1fd40:	87 bf       	out	0x37, r24	; 55
   1fd42:	e8 95       	spm
   1fd44:	07 b6       	in	r0, 0x37	; 55
   1fd46:	00 fc       	sbrc	r0, 0
   1fd48:	fd cf       	rjmp	.-6      	; 0x1fd44 <main+0x144>
   1fd4a:	d7 be       	out	0x37, r13	; 55
   1fd4c:	e8 95       	spm
   1fd4e:	25 c0       	rjmp	.+74     	; 0x1fd9a <main+0x19a>
   1fd50:	84 37       	cpi	r24, 0x74	; 116
   1fd52:	a9 f4       	brne	.+42     	; 0x1fd7e <main+0x17e>
   1fd54:	2c d0       	rcall	.+88     	; 0x1fdae <getch>
   1fd56:	2b d0       	rcall	.+86     	; 0x1fdae <getch>
   1fd58:	b8 2e       	mov	r11, r24
   1fd5a:	29 d0       	rcall	.+82     	; 0x1fdae <getch>
   1fd5c:	3a d0       	rcall	.+116    	; 0x1fdd2 <verifySpace>
   1fd5e:	cb 2c       	mov	r12, r11
   1fd60:	48 01       	movw	r8, r16
   1fd62:	f4 01       	movw	r30, r8
   1fd64:	86 91       	elpm	r24, Z
   1fd66:	1c d0       	rcall	.+56     	; 0x1fda0 <putch>
   1fd68:	08 94       	sec
   1fd6a:	81 1c       	adc	r8, r1
   1fd6c:	91 1c       	adc	r9, r1
   1fd6e:	ca 94       	dec	r12
   1fd70:	c1 f7       	brne	.-16     	; 0x1fd62 <main+0x162>
   1fd72:	0f 5f       	subi	r16, 0xFF	; 255
   1fd74:	1f 4f       	sbci	r17, 0xFF	; 255
   1fd76:	ba 94       	dec	r11
   1fd78:	0b 0d       	add	r16, r11
   1fd7a:	11 1d       	adc	r17, r1
   1fd7c:	0e c0       	rjmp	.+28     	; 0x1fd9a <main+0x19a>
   1fd7e:	85 37       	cpi	r24, 0x75	; 117
   1fd80:	39 f4       	brne	.+14     	; 0x1fd90 <main+0x190>
   1fd82:	27 d0       	rcall	.+78     	; 0x1fdd2 <verifySpace>
   1fd84:	8e e1       	ldi	r24, 0x1E	; 30
   1fd86:	0c d0       	rcall	.+24     	; 0x1fda0 <putch>
   1fd88:	87 e9       	ldi	r24, 0x97	; 151
   1fd8a:	0a d0       	rcall	.+20     	; 0x1fda0 <putch>
   1fd8c:	85 e0       	ldi	r24, 0x05	; 5
   1fd8e:	78 cf       	rjmp	.-272    	; 0x1fc80 <main+0x80>
   1fd90:	81 35       	cpi	r24, 0x51	; 81
   1fd92:	11 f4       	brne	.+4      	; 0x1fd98 <main+0x198>
   1fd94:	88 e0       	ldi	r24, 0x08	; 8
   1fd96:	17 d0       	rcall	.+46     	; 0x1fdc6 <watchdogConfig>
   1fd98:	1c d0       	rcall	.+56     	; 0x1fdd2 <verifySpace>
   1fd9a:	80 e1       	ldi	r24, 0x10	; 16
   1fd9c:	01 d0       	rcall	.+2      	; 0x1fda0 <putch>
   1fd9e:	61 cf       	rjmp	.-318    	; 0x1fc62 <main+0x62>

0001fda0 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1fda0:	90 91 c0 00 	lds	r25, 0x00C0
   1fda4:	95 ff       	sbrs	r25, 5
   1fda6:	fc cf       	rjmp	.-8      	; 0x1fda0 <putch>
  UDR0 = ch;
   1fda8:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1fdac:	08 95       	ret

0001fdae <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1fdae:	80 91 c0 00 	lds	r24, 0x00C0
   1fdb2:	87 ff       	sbrs	r24, 7
   1fdb4:	fc cf       	rjmp	.-8      	; 0x1fdae <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
   1fdb6:	80 91 c0 00 	lds	r24, 0x00C0
   1fdba:	84 fd       	sbrc	r24, 4
   1fdbc:	01 c0       	rjmp	.+2      	; 0x1fdc0 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdbe:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1fdc0:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fdc4:	08 95       	ret

0001fdc6 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdc6:	e0 e6       	ldi	r30, 0x60	; 96
   1fdc8:	f0 e0       	ldi	r31, 0x00	; 0
   1fdca:	98 e1       	ldi	r25, 0x18	; 24
   1fdcc:	90 83       	st	Z, r25
  WDTCSR = x;
   1fdce:	80 83       	st	Z, r24
}
   1fdd0:	08 95       	ret

0001fdd2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fdd2:	ed df       	rcall	.-38     	; 0x1fdae <getch>
   1fdd4:	80 32       	cpi	r24, 0x20	; 32
   1fdd6:	19 f0       	breq	.+6      	; 0x1fdde <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fdd8:	88 e0       	ldi	r24, 0x08	; 8
   1fdda:	f5 df       	rcall	.-22     	; 0x1fdc6 <watchdogConfig>
   1fddc:	ff cf       	rjmp	.-2      	; 0x1fddc <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fdde:	84 e1       	ldi	r24, 0x14	; 20
   1fde0:	df cf       	rjmp	.-66     	; 0x1fda0 <putch>

0001fde2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fde2:	cf 93       	push	r28
   1fde4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fde6:	e3 df       	rcall	.-58     	; 0x1fdae <getch>
   1fde8:	c1 50       	subi	r28, 0x01	; 1
   1fdea:	e9 f7       	brne	.-6      	; 0x1fde6 <getNch+0x4>
  verifySpace();
   1fdec:	f2 df       	rcall	.-28     	; 0x1fdd2 <verifySpace>
}
   1fdee:	cf 91       	pop	r28
   1fdf0:	08 95       	ret

0001fdf2 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
   1fdf2:	80 e0       	ldi	r24, 0x00	; 0
   1fdf4:	e8 df       	rcall	.-48     	; 0x1fdc6 <watchdogConfig>
  __asm__ __volatile__ (
   1fdf6:	ee 27       	eor	r30, r30
   1fdf8:	ff 27       	eor	r31, r31
   1fdfa:	09 94       	ijmp
